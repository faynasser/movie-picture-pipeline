name: Frontend Continuous Deployment

on:
  push:
    branches: [ "main" ]
    paths:
      - "starter/frontend/**"
      - ".github/workflows/frontend-cd.yaml"
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: movie-frontend
  IMAGE_TAG: ${{ github.sha }}
  CLUSTER_NAME: p3-cluster
  K8S_NAMESPACE: movie

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install deps
        working-directory: starter/frontend
        run: npm ci
      - name: Lint
        working-directory: starter/frontend
        run: npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install deps
        working-directory: starter/frontend
        run: npm ci
      - name: Test
        working-directory: starter/frontend
        run: npm test -- --watch=false

  build_push_deploy:
    runs-on: ubuntu-latest
    needs: [lint, test]
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR repository exists
        env:
          REPO: ${{ env.ECR_REPOSITORY }}
        run: |
          aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "$REPO"

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # tools + kubeconfig to read backend service hostname
      - name: Install kubectl & kustomize
        run: |
          curl -sSLO https://storage.googleapis.com/kubernetes-release/release/v1.29.6/bin/linux/amd64/kubectl
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/kubectl
          curl -sS https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh | bash
          sudo mv kustomize /usr/local/bin/kustomize

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name "${{ env.CLUSTER_NAME }}" --region "${{ env.AWS_REGION }}"

      - name: Resolve backend API URL from Service
        id: api
        run: |
          ns="${{ env.K8S_NAMESPACE }}"
          svc="backend"
          host=$(kubectl -n "$ns" get svc "$svc" -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          ip=$(kubectl -n "$ns" get svc "$svc" -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          endpoint=${host:-$ip}
          echo "url=http://${endpoint}:5000" >> "$GITHUB_OUTPUT"

      - name: Build & push image to ECR
        working-directory: starter/frontend
        env:
          ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          API_URL: ${{ steps.api.outputs.url }}
        run: |
          echo "Using API URL: $API_URL"
          docker build --build-arg REACT_APP_MOVIE_API_URL="$API_URL" \
            -t ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker tag  ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} \
            $ACCOUNT.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push $ACCOUNT.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Ensure namespace exists
        run: kubectl get ns "${{ env.K8S_NAMESPACE }}" || kubectl create ns "${{ env.K8S_NAMESPACE }}"

      - name: Deploy with kustomize
        working-directory: starter/frontend/k8s
        env:
          ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          kustomize edit set image frontend=$ACCOUNT.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          kustomize edit set namespace ${{ env.K8S_NAMESPACE }}
          kustomize build | kubectl apply -f -

