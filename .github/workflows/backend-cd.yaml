name: Backend Continuous Deployment
on:
  push:
    branches: [ "main" ]
    paths:
      - "starter/backend/**"
      - ".github/workflows/backend-cd.yaml"
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: movie-backend
  IMAGE_TAG: ${{ github.sha }}
  CLUSTER_NAME: udacity-project4
  K8S_NAMESPACE: movie

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install deps (pipenv + dev)
        working-directory: starter/backend
        run: |
          python -m pip install --upgrade pip pipenv
          pipenv install --dev
          pipenv run pip install flake8
      - name: Lint (flake8)
        working-directory: starter/backend
        run: pipenv run flake8 .

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install deps (pipenv + dev)
        working-directory: starter/backend
        run: |
          python -m pip install --upgrade pip pipenv
          pipenv install --dev
          pipenv run pip install pytest
      - name: Run pytest
        working-directory: starter/backend
        run: pipenv run pytest -q

  build_push_deploy:
    runs-on: ubuntu-latest
    needs: [ lint, test ]
    permissions: { id-token: write, contents: read }
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push image to ECR
        env: { ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }} }
        working-directory: starter/backend
        run: |
          docker build -t ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker tag  ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} $ACCOUNT.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push $ACCOUNT.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Install kubectl & kustomize
        run: |
          curl -sSLO https://storage.googleapis.com/kubernetes-release/release/v1.29.6/bin/linux/amd64/kubectl
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/kubectl
          curl -sS https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh | bash
          sudo mv kustomize /usr/local/bin/kustomize

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name "${{ env.CLUSTER_NAME }}" --region "${{ env.AWS_REGION }}"

      - name: Ensure namespace exists
        run: kubectl get ns "${{ env.K8S_NAMESPACE }}" || kubectl create ns "${{ env.K8S_NAMESPACE }}"

      - name: Deploy with kustomize
        env: { ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }} }
        working-directory: starter/backend/k8s
        run: |
          kustomize edit set image backend=$ACCOUNT.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          kustomize build | kubectl -n "${{ env.K8S_NAMESPACE }}" apply -f -
